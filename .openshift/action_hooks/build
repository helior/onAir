#!/bin/bash
# This is a simple build script and will be executed on your CI system if
# available.  Otherwise it will execute while your application is stopped
# before the deploy step.  This script gets executed directly, so it
# could be python, php, ruby, etc.

set -e

export CUSTOM_REPO_SLUG="helior/onAir"
export CUSTOM_TAR_NAME="onAir.tar.gz"
export CUSTOM_WEBROOT="${OPENSHIFT_REPO_DIR}php"

export DRUPAL_SETTINGS="${OPENSHIFT_DATA_DIR}settings.local.php"
export DRUPAL_FILES_DIR="${OPENSHIFT_DATA_DIR}files"
export DRUPAL_PRIVATE_DIR="${OPENSHIFT_DATA_DIR}private"
export DRUPAL_TEMP_DIR="${OPENSHIFT_TMP_DIR}drupal"

# env

# Create the downloads directory if it doesn't exist yet.
if [ ! -d "${OPENSHIFT_DATA_DIR}downloads" ]; then
  echo "Creating downloads directory for the first time..."
  mkdir -p "${OPENSHIFT_DATA_DIR}downloads"
fi

# Create Drupal's setting file that contains configuration to integrate with the
# infrastructure (OpenShift in this case). We'll persist this file in a common
# location and later symbolically link it to each release. We'll use the
# existance of this file to determine if other support files have been created
# already (files directory, et al.)
if [ ! -f $DRUPAL_SETTINGS ]; then
  echo "Creating settings.local.php for the first time..."
  echo "If you want to re-run this setup, delete the file: ${DRUPAL_SETTINGS}"

  echo "Cleaning up, just in case we're doing this a second time around..."
  rm -rf ${DRUPAL_FILES_DIR}
  rm -rf ${DRUPAL_PRIVATE_DIR}

  # If MySQL is not available yet, exit early and notify the user.
  if [ -z "$OPENSHIFT_MYSQL_DB_HOST" ] || [ -z "$OPENSHIFT_MYSQL_DB_PORT" ]; then
    echo 1>&2
    echo "Could not find mysql database. Please run:" 1>&2
    echo "rhc cartridge add mysql -a $OPENSHIFT_APP_NAME" 1>&2
    echo "then make a sample commit (add whitespace somewhere) and re-push" 1>&2
    echo 1>&2
    exit 5
  fi

  echo "Creating file directories for the first time..."
  mkdir -p ${DRUPAL_FILES_DIR}
  mkdir -p ${DRUPAL_PRIVATE_DIR}
  chmod u+w ${DRUPAL_FILES_DIR}

  echo "Generating a settings.local.php file..."
  touch ${DRUPAL_SETTINGS}
  cat << EOF > "${OPENSHIFT_TMP_DIR}/settings.local.php"
<?php

/**
 * For maximum portability, use the OpenShift environment variables.
 */

// When run from Drush, only $_ENV is available.  Might be a bug
if (array_key_exists('OPENSHIFT_APP_NAME', \$_SERVER)) {
  \$src = \$_SERVER;
} else {
  \$src = \$_ENV;
}
\$databases = array (
  'default' =>
  array (
    'default' =>
    array (
      'database' => \$src['OPENSHIFT_APP_NAME'],
      'username' => \$src['OPENSHIFT_MYSQL_DB_USERNAME'],
      'password' => \$src['OPENSHIFT_MYSQL_DB_PASSWORD'],
      'host' => \$src['OPENSHIFT_MYSQL_DB_HOST'],
      'port' => \$src['OPENSHIFT_MYSQL_DB_PORT'],
      'driver' => 'mysql',
      'prefix' => '',
    ),
  ),
);

\$scheme = !empty(\$src['HTTPS']) ? 'https' : 'http';
\$base_url = \$scheme . '://' . \$src['HTTP_HOST'];
\$conf['file_private_path'] = '${DRUPAL_PRIVATE_DIR}';
\$conf['file_temporary_path'] = '${DRUPAL_TEMP_DIR}';
\$conf['s3fs_awssdk2_access_key'] = \$src['ONAIR_AWS_ACCESS_KEY'];
\$conf['s3fs_awssdk2_secret_key'] = \$src['ONAIR_AWS_SECRET_KEY'];
\$conf['s3fs_region'] = \$src['ONAIR_AWS_REGION'];
\$conf['s3fs_bucket'] = \$src['ONAIR_AWS_S3_BUCKET'];
\$conf['s3fs_root_folder'] = \$src['ONAIR_AWS_S3_ROOT_FOLDER'];

EOF
  cat "${OPENSHIFT_TMP_DIR}/settings.local.php" > ${DRUPAL_SETTINGS}
  rm -rf "${OPENSHIFT_TMP_DIR}/settings.local.php"

  echo "Finished creating ${DRUPAL_SETTINGS} file; one-time setup complete..."
fi

# This is rather random, but OpenShift uses a "php" directory in the repository
# as the webroot. We'll need to manage what the webroot points to at the
# deployment layer, so we'll notify the user to not use a php directory in the
# repo. Again, so random.
if [ -e ${CUSTOM_WEBROOT} -a ! -h ${CUSTOM_WEBROOT} ]; then
  echo "ERROR: The 'php' directory (specifically ${CUSTOM_WEBROOT}) is used in OpenShift as the webroot. Please remove it from the Git repository, as it is preventing deployments."
  exit 5
fi

# Now that everything is in its right place, let's start managing deployment
# artifacts. We'll keep artifacts in their own respective directory and
# symbolically link the webroot with the desired release.
#
# We diverge a little from the way OpenShift does deployments for a couple of
# reasons: first, OpenShift is not a great environment for creating builds â€“ we
# defer to Travis CI for that; secondly, we can't rely on the ref from
# `rhc deploy <ref>` since for whatever reason, we don't know at run-time what
# that ref is! So as a work around, we have the user define an environment
# variable to determine which release tag we will download from the Github
# Releases artifact server.
#
# First things first: Fail if the release tag has not been set.
if [ -z ${RELEASE_TAG+x} ]; then
  echo "ERROR: ENV variable RELEASE_TAG is not set!! We don't know what to deploy! Please set a valid release tag from Github by running:"  1>&2
  echo "rhc env set RELEASE_TAG=v1.2.3 -a ${OPENSHIFT_APP_NAME}" 1>&2
  exit 5
fi

if [ -d "${OPENSHIFT_DATA_DIR}downloads/${RELEASE_TAG}" ]; then
  CUSTOM_CURRENT_INSTALL_DIR=$(readlink -f ${CUSTOM_WEBROOT})
  echo "NOTICE: Version ${RELEASE_TAG} has already been downloaded."
  echo "NOTICE: Drupal is currently installed at $CUSTOM_CURRENT_INSTALL_DIR"
else
  echo "Downloading ${RELEASE_TAG}..."
  CUSTOM_DEPLOY_DOWNLOAD_URL="https://github.com/${CUSTOM_REPO_SLUG}/releases/download/${RELEASE_TAG}/${CUSTOM_TAR_NAME}"

  wget $CUSTOM_DEPLOY_DOWNLOAD_URL --directory-prefix=${OPENSHIFT_TMP_DIR}

  if [ $? -ne 0 ]; then
    echo "ERROR: Could not download '${CUSTOM_DEPLOY_DOWNLOAD_URL}'; please make sure this release exists."
    exit 7
  fi

  CUSTOM_CURRENT_DEPLOY_PATH="${OPENSHIFT_DATA_DIR}downloads/${RELEASE_TAG}"
  echo "Moving downloaded artifact to ${CUSTOM_CURRENT_DEPLOY_PATH}..."
  mkdir -p "${CUSTOM_CURRENT_DEPLOY_PATH}"
  tar xpf "${OPENSHIFT_TMP_DIR}/$CUSTOM_TAR_NAME" -C "${CUSTOM_CURRENT_DEPLOY_PATH}" --strip-components 1
  rm -rf "${OPENSHIFT_TMP_DIR}/$CUSTOM_TAR_NAME"

  # Modify artifact for OpenShift.
  echo "Adding files and configurations to current deployment..."

  # Drush settings
  echo "\$options['uri'] = \$_ENV['OPENSHIFT_APP_DNS'];" >> "${CUSTOM_CURRENT_DEPLOY_PATH}/sites/all/drush/drushrc.php"
  echo "\$options['root'] = \$_ENV['OPENSHIFT_REPO_DIR'].'php';" >> "${CUSTOM_CURRENT_DEPLOY_PATH}/sites/all/drush/drushrc.php"

  # Health check
  cp ${OPENSHIFT_REPO_DIR}.openshift/health_check.php ${CUSTOM_CURRENT_DEPLOY_PATH}

  # Settings
  ln -sfn ${DRUPAL_SETTINGS} "${CUSTOM_CURRENT_DEPLOY_PATH}/sites/default/settings/settings.local.php"

  # Files
  ln -sfn ${DRUPAL_FILES_DIR} "${CUSTOM_CURRENT_DEPLOY_PATH}/sites/default/files"
fi

# TODO: Do not attempt symlink if there are no changes to the source
ln -sfn $CUSTOM_CURRENT_DEPLOY_PATH $CUSTOM_WEBROOT
