#!/bin/bash
# This is a simple build script and will be executed on your CI system if
# available.  Otherwise it will execute while your application is stopped
# before the deploy step.  This script gets executed directly, so it
# could be python, php, ruby, etc.

set -e

export CUSTOM_REPO_SLUG="helior/onAir"
export CUSTOM_TAR_NAME="onAir.tar.gz"
export CUSTOM_WEBROOT="${OPENSHIFT_REPO_DIR}php"

export DRUPAL_SETTINGS="${OPENSHIFT_DATA_DIR}settings.local.php"
export DRUPAL_FILES_DIR="${OPENSHIFT_DATA_DIR}files"
export DRUPAL_PRIVATE_DIR="${OPENSHIFT_DATA_DIR}private"
export DRUPAL_TEMP_DIR="${OPENSHIFT_TMP_DIR}drupal"

# env

# Create the downloads directory if it doesn't exist yet.
if [ ! -d "${OPENSHIFT_DATA_DIR}downloads" ]; then
  echo "Creating downloads directory for the first time..."
  mkdir -p "${OPENSHIFT_DATA_DIR}downloads"
fi

# Create Drupal's setting file that contains configuration to integrate with the
# infrastructure (OpenShift in this case). We'll persist this file in a common
# location and later symbolically link it to each release. We'll use the
# existance of this file to determine if other support files have been created
# already (files directory, et al.)
if [ ! -f $DRUPAL_SETTINGS ]; then
  echo "Creating settings.local.php for the first time..."
  echo "If you want to re-run this setup, delete the file: ${DRUPAL_SETTINGS}"

  echo "Cleaning up, just in case we're doing this a second time around..."
  rm -rf ${DRUPAL_FILES_DIR}
  rm -rf ${DRUPAL_PRIVATE_DIR}

  # If MySQL is not available yet, exit early and notify the user.
  if [ -z "$OPENSHIFT_MYSQL_DB_HOST" ] || [ -z "$OPENSHIFT_MYSQL_DB_PORT" ]; then
    echo 1>&2
    echo "Could not find mysql database. Please run:" 1>&2
    echo "rhc cartridge add mysql -a $OPENSHIFT_APP_NAME" 1>&2
    echo "then make a sample commit (add whitespace somewhere) and re-push" 1>&2
    echo 1>&2
    exit 5
  fi

  echo "Creating file directories for the first time..."
  mkdir -p ${DRUPAL_FILES_DIR}
  mkdir -p ${DRUPAL_PRIVATE_DIR}
  chmod u+w ${DRUPAL_FILES_DIR}

  echo "Generating a settings.local.php file..."
  touch ${DRUPAL_SETTINGS}
  cat << EOF > "${OPENSHIFT_TMP_DIR}/settings.local.php"
<?php

/**
 * For maximum portability, use the OpenShift environment variables.
 */

// When run from Drush, only $_ENV is available.  Might be a bug
if (array_key_exists('OPENSHIFT_APP_NAME', \$_SERVER)) {
  \$src = \$_SERVER;
} else {
  \$src = \$_ENV;
}
\$databases = array (
  'default' =>
  array (
    'default' =>
    array (
      'database' => \$src['OPENSHIFT_APP_NAME'],
      'username' => \$src['OPENSHIFT_MYSQL_DB_USERNAME'],
      'password' => \$src['OPENSHIFT_MYSQL_DB_PASSWORD'],
      'host' => \$src['OPENSHIFT_MYSQL_DB_HOST'],
      'port' => \$src['OPENSHIFT_MYSQL_DB_PORT'],
      'driver' => 'mysql',
      'prefix' => '',
    ),
  ),
);

\$scheme = !empty(\$src['HTTPS']) ? 'https' : 'http';
\$base_url = \$scheme . '://' . \$src['HTTP_HOST'];
\$conf['file_private_path'] = '${DRUPAL_PRIVATE_DIR}';
\$conf['file_temporary_path'] = '${DRUPAL_TEMP_DIR}';
\$conf['s3fs_awssdk2_access_key'] = \$src['ONAIR_AWS_ACCESS_KEY'];
\$conf['s3fs_awssdk2_secret_key'] = \$src['ONAIR_AWS_SECRET_KEY'];
\$conf['s3fs_region'] = \$src['ONAIR_AWS_REGION'];
\$conf['s3fs_bucket'] = \$src['ONAIR_AWS_S3_BUCKET'];
\$conf['s3fs_root_folder'] = \$src['ONAIR_AWS_S3_ROOT_FOLDER'];

EOF
  cat "${OPENSHIFT_TMP_DIR}/settings.local.php" > ${DRUPAL_SETTINGS}
  rm -rf "${OPENSHIFT_TMP_DIR}/settings.local.php"

  echo "Finished creating ${DRUPAL_SETTINGS} file; one-time setup complete..."
fi

# This is rather random, but OpenShift uses a "php" directory in the repository
# as the webroot. We'll need to manage what the webroot points to at the
# deployment layer, so we'll notify the user to not use a php directory in the
# repo. Again, so random.
if [ -e ${CUSTOM_WEBROOT} -a ! -h ${CUSTOM_WEBROOT} ]; then
  echo "ERROR: The 'php' directory (specifically ${CUSTOM_WEBROOT}) is used in OpenShift as the webroot. Please remove it from the Git repository, as it is preventing deployments."
  exit 5
fi
