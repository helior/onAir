#!/bin/bash
# This is a simple build script and will be executed on your CI system if
# available.  Otherwise it will execute while your application is stopped
# before the deploy step.  This script gets executed directly, so it
# could be python, php, ruby, etc.

set -e

export CUSTOM_REPO_SLUG="helior/onAIr"
export CUSTOM_TAR_NAME="onAir.tar.gz"

export DRUPAL_SETTINGS="${OPENSHIFT_DATA_DIR}settings.local.php"
export DRUPAL_FILES_DIR="${OPENSHIFT_DATA_DIR}files"
export DRUPAL_PRIVATE_DIR="${OPENSHIFT_DATA_DIR}private"
export DRUPAL_TEMP_DIR="${OPENSHIFT_TMP_DIR}drupal"

# env

# Instantiate the download directory
if [ ! -d "${OPENSHIFT_DATA_DIR}downloads" ]; then
  echo "Creating downloads directory for the first time..."
  mkdir -p "${OPENSHIFT_DATA_DIR}downloads"
fi

# Instantiate local settings file.
if [ ! -f $DRUPAL_SETTINGS ]; then
  echo "Creating settings.local.php for the first time..."
  echo "If you want to re-run this setup, delete the file: ${DRUPAL_SETTINGS}"

  echo "Cleaning up, just in case we're doing this a second time around..."
  rm -rf ${DRUPAL_FILES_DIR}
  rm -rf ${DRUPAL_PRIVATE_DIR}

  if [ -z "$OPENSHIFT_MYSQL_DB_HOST" ]; then
    echo 1>&2
    echo "Could not find mysql database. Please run:" 1>&2
    echo "rhc cartridge add mysql -a $OPENSHIFT_APP_NAME" 1>&2
    echo "then make a sample commit (add whitespace somewhere) and re-push" 1>&2
    echo 1>&2
    exit 5
  fi
  if [ -z "$OPENSHIFT_MYSQL_DB_PORT" ]; then
    exit 6
  fi

  echo "Creating file directories for the first time..."
  mkdir -p ${DRUPAL_FILES_DIR}
  mkdir -p ${DRUPAL_PRIVATE_DIR}
  chmod u+w ${DRUPAL_FILES_DIR}

  touch ${DRUPAL_SETTINGS}
  cat << "END" > "${OPENSHIFT_TMP_DIR}/settings.local.php"

/**
 * For maximum portability, use the OpenShift environment variables.
 */

// When run from Drush, only $_ENV is available.  Might be a bug
if (array_key_exists('OPENSHIFT_APP_NAME', $_SERVER)) {
  $src = $_SERVER;
} else {
  $src = $_ENV;
}
$databases = array (
  'default' =>
  array (
    'default' =>
    array (
      'database' => $src['OPENSHIFT_APP_NAME'],
      'username' => $src['OPENSHIFT_MYSQL_DB_USERNAME'],
      'password' => $src['OPENSHIFT_MYSQL_DB_PASSWORD'],
      'host' => $src['OPENSHIFT_MYSQL_DB_HOST'],
      'port' => $src['OPENSHIFT_MYSQL_DB_PORT'],
      'driver' => 'mysql',
      'prefix' => '',
    ),
  ),
);
END
  cat "${OPENSHIFT_TMP_DIR}/settings.local.php" > ${DRUPAL_SETTINGS}
  rm -rf "${OPENSHIFT_TMP_DIR}/settings.local.php"

  echo "\$scheme = !empty(\$src['HTTPS']) ? 'https' : 'http';" >> ${DRUPAL_SETTINGS}
  echo "\$base_url = \$scheme . '://' . \$src['HTTP_HOST'];" >> ${DRUPAL_SETTINGS}
  echo "\$conf['file_private_path'] = \$src['DRUPAL_PRIVATE_DIR'];" >> ${DRUPAL_SETTINGS}
  echo "\$conf['file_temporary_path'] = \$src['DRUPAL_TEMP_DIR'];" >> ${DRUPAL_SETTINGS}

  echo "Finished creating ${DRUPAL_SETTINGS} file..."
fi

# Warn about the PHP directory being the webroot.
if [ -e "${OPENSHIFT_REPO_DIR}php" -a ! -h "${OPENSHIFT_REPO_DIR}php" ]; then
  echo "ERROR: The 'php' directory (specifically ${OPENSHIFT_REPO_DIR}php) is used in OpenShift as the webroot. Please remove it from the Git repository, as it is preventing deployments."
  exit 5
fi

# Fail if deployment tag is not set.
if [ -z ${CUSTOM_DEPLOY_TAG+x} ]; then
  echo "ERROR: ENV variable CUSTOM_DEPLOY_TAG is not set!! We don't know what to deploy! Please set it to a valid release tag from Github."
  exit 5
fi

if [ -d "${OPENSHIFT_DATA_DIR}downloads/${CUSTOM_DEPLOY_TAG}" ]; then
  echo "NOTICE: Version ${CUSTOM_DEPLOY_TAG} has already been downloaded."
else
  echo "Downloading ${CUSTOM_DEPLOY_TAG}..."
  CUSTOM_DEPLOY_DOWNLOAD_URL="https://github.com/${CUSTOM_REPO_SLUG}/releases/download/${CUSTOM_DEPLOY_TAG}/${CUSTOM_TAR_NAME}"

  wget $CUSTOM_DEPLOY_DOWNLOAD_URL --directory-prefix=${OPENSHIFT_TMP_DIR}

  if [ $? -ne 0 ]; then
    echo "ERROR: Could not download '${CUSTOM_DEPLOY_DOWNLOAD_URL}'; please make sure this path is correct."
    exit 7
  fi

  mkdir -p "${OPENSHIFT_DATA_DIR}downloads/${CUSTOM_DEPLOY_TAG}"

  echo "Moving downloaded artifact to ${OPENSHIFT_DATA_DIR}downloads/${CUSTOM_DEPLOY_TAG}..."
  tar xpf "${OPENSHIFT_TMP_DIR}/$CUSTOM_TAR_NAME" -C "${OPENSHIFT_DATA_DIR}downloads/${CUSTOM_DEPLOY_TAG}"
  rm -rf "${OPENSHIFT_TMP_DIR}/$CUSTOM_TAR_NAME"
fi

DRUPAL_SITE_DIR=${OPENSHIFT_DATA_DIR}sites

echo

# Drush settings
cat >$OPENSHIFT_HOMEDIR/.drush/drushrc.php <<EOF
<?php
  \$options['uri'] = \$_ENV['OPENSHIFT_APP_DNS'];
  \$options['root'] = \$_ENV['OPENSHIFT_REPO_DIR'].'php';
EOF

#
# If there is no current download of Drupal, create one.
#
if [ ! -d "${OPENSHIFT_DATA_DIR}downloads/current" ]
then
  mkdir -p ${OPENSHIFT_TMP_DIR}drupal

  echo "Download and install the latest stable version of Drupal"
  echo

  mkdir -p ${OPENSHIFT_DATA_DIR}downloads
  if ! drush dl drupal --destination=${OPENSHIFT_DATA_DIR}downloads --yes
  then
    echo "ERROR: Unable download and install Drupal."
    exit 7
  fi

  #
  # Link the /current symlink to the latest Drupal instance
  #
  rm -f ${OPENSHIFT_DATA_DIR}downloads/current
  LATEST=$(ls -1t ${OPENSHIFT_DATA_DIR}downloads | head -1)
  export DRUPAL_INSTALL_DIR="${OPENSHIFT_DATA_DIR}downloads/${LATEST}"
  ln -s ${LATEST} ${OPENSHIFT_DATA_DIR}downloads/current

  mv $DRUPAL_INSTALL_DIR/sites $DRUPAL_INSTALL_DIR/sites.original

  #
  # Ensure there is a default health check
  #
  cp ${OPENSHIFT_REPO_DIR}.openshift/health_check.php ${DRUPAL_INSTALL_DIR}

  patch ${DRUPAL_INSTALL_DIR}/.htaccess < ${OPENSHIFT_REPO_DIR}.openshift/.htaccess.patch

  echo "Drupal installed to $DRUPAL_INSTALL_DIR"
else
  DRUPAL_INSTALL_DIR=$(readlink -f ${OPENSHIFT_DATA_DIR}downloads/current)
  echo "Drupal is already installed at $DRUPAL_INSTALL_DIR"
fi

echo

#
# Link the /sites directory (where Drupal stores modules and files)
# into the install dir in order to keep it easily accessible.
#/
if [ ! -d "$DRUPAL_SITE_DIR" ]
then
  cp -r $DRUPAL_INSTALL_DIR/sites.original $DRUPAL_SITE_DIR
  ln -sfn ../../sites $DRUPAL_INSTALL_DIR/sites
fi

#
# Ensure that the app-root/runtime/repo/php PHP directory points
# to a valid Drupal instance directory
#
ln -sfn ../../data/downloads/current ${OPENSHIFT_REPO_DIR}php
if [ ! -d "${OPENSHIFT_REPO_DIR}php" ]
then
  echo "ERROR: Unable to link the PHP directory, as the current Drupal instance is not a valid directory."
  exit 8
fi
