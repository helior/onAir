#!/bin/bash
# This deploy hook gets executed after dependencies are resolved and the
# build hook has been run but before the application has been started back
# up again.  This script gets executed directly, so it could be python, php,
# ruby, etc.

set -e

export CUSTOM_REPO_SLUG="helior/onAir"
export CUSTOM_TAR_NAME="onAir.tar.gz"
export CUSTOM_WEBROOT="${OPENSHIFT_REPO_DIR}php"

export DRUPAL_SETTINGS="${OPENSHIFT_DATA_DIR}settings.local.php"
export DRUPAL_FILES_DIR="${OPENSHIFT_DATA_DIR}files"
export DRUPAL_PRIVATE_DIR="${OPENSHIFT_DATA_DIR}private"
export DRUPAL_TEMP_DIR="${OPENSHIFT_TMP_DIR}drupal"


source $OPENSHIFT_CARTRIDGE_SDK_BASH

# Now that everything is in its right place, let's start managing deployment
# artifacts. We'll keep artifacts in their own respective directory and
# symbolically link the webroot with the desired release.
#
# We diverge a little from the way OpenShift does deployments for a couple of
# reasons: first, OpenShift is not a great environment for creating builds â€“ we
# defer to Travis CI for that; secondly, we can't rely on the ref from
# `rhc deploy <ref>` since for whatever reason, we don't know at run-time what
# that ref is! So as a work around, we have the user define an environment
# variable to determine which release tag we will download from the Github
# Releases artifact server.
#
# First things first: Fail if the release tag has not been set.
if [ -z ${RELEASE_TAG+x} ]; then
  echo "ERROR: ENV variable RELEASE_TAG is not set!! We don't know what to deploy! Please set a valid release tag from Github by running:"  1>&2
  echo "rhc env set RELEASE_TAG=v1.2.3 -a ${OPENSHIFT_APP_NAME}" 1>&2
  exit 0
fi

if [ -d "${OPENSHIFT_DATA_DIR}downloads/${RELEASE_TAG}" ]; then
  CUSTOM_CURRENT_INSTALL_DIR=$(readlink -f ${CUSTOM_WEBROOT})
  echo "NOTICE: Version ${RELEASE_TAG} has already been downloaded."
  echo "NOTICE: Drupal is currently installed at $CUSTOM_CURRENT_INSTALL_DIR"
else
  echo "Downloading ${RELEASE_TAG}..."
  CUSTOM_DEPLOY_DOWNLOAD_URL="https://github.com/${CUSTOM_REPO_SLUG}/releases/download/${RELEASE_TAG}/${CUSTOM_TAR_NAME}"

  wget $CUSTOM_DEPLOY_DOWNLOAD_URL --directory-prefix=${OPENSHIFT_TMP_DIR}

  if [ $? -ne 0 ]; then
    echo "ERROR: Could not download '${CUSTOM_DEPLOY_DOWNLOAD_URL}'; please make sure this release exists."
    exit 7
  fi

  CUSTOM_CURRENT_DEPLOY_PATH="${OPENSHIFT_DATA_DIR}downloads/${RELEASE_TAG}"
  echo "Moving downloaded artifact to ${CUSTOM_CURRENT_DEPLOY_PATH}..."
  mkdir -p "${CUSTOM_CURRENT_DEPLOY_PATH}"
  tar xpf "${OPENSHIFT_TMP_DIR}/$CUSTOM_TAR_NAME" -C "${CUSTOM_CURRENT_DEPLOY_PATH}" --strip-components 1
  rm -rf "${OPENSHIFT_TMP_DIR}/$CUSTOM_TAR_NAME"

  # Modify artifact for OpenShift.
  echo "Adding files and configurations to current deployment..."

  # Drush settings
  echo "\$options['uri'] = \$_ENV['OPENSHIFT_APP_DNS'];" >> "${CUSTOM_CURRENT_DEPLOY_PATH}/sites/all/drush/drushrc.php"
  echo "\$options['root'] = \$_ENV['OPENSHIFT_REPO_DIR'].'php';" >> "${CUSTOM_CURRENT_DEPLOY_PATH}/sites/all/drush/drushrc.php"

  # Health check
  cp ${OPENSHIFT_REPO_DIR}.openshift/health_check.php ${CUSTOM_CURRENT_DEPLOY_PATH}

  # Settings
  ln -sfn ${DRUPAL_SETTINGS} "${CUSTOM_CURRENT_DEPLOY_PATH}/sites/default/settings/settings.local.php"

  # Files
  ln -sfn ${DRUPAL_FILES_DIR} "${CUSTOM_CURRENT_DEPLOY_PATH}/sites/default/files"
fi

# TODO: Do not attempt symlink if there are no changes to the source
ln -sfn $CUSTOM_CURRENT_DEPLOY_PATH $CUSTOM_WEBROOT
